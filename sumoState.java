
//package multivesta;

import vesta.mc.NewState;
import vesta.mc.ParametersForState;

import java.util.StringTokenizer;

import org.eclipse.sumo.libsumo.*;
import org.eclipse.sumo.libsumo.StringVector;

public class sumoState extends NewState {


	private static final String SUMO_LIBRARY = "libsumojni";

	public static final int OBSERVE_TIME = 0;
	public static final int OBSERVE_STEP = 1;
	public static final int OBSERVE_DONE = 2;
	public static final int OBSERVE_WAITINGTIME = 3;
	public static final int TIME_LOSS = 4;
	public static final int GET_SPEED = 5;
	public static final int GET_ARRIVED_VEHICLE = 6;
	public static final int GET_CO2 = 7;
	public static final int GET_DEVIATION_OF_SPEED_FACTOR = 8;
	public static final int GET_TRAVEL_TIME = 9;
	public static final int GET_TRAFFIC_I1 = 10;
	public static final int GET_TRAFFIC_I2 = 11;
	public static final int GET_EMERGENCY = 12;
	public static final int GET_EMERGENCY_BOOL = 13;
	public static final int GET_DEPARTED_VEHICLE = 14;
	public static final int GET_TRAFFIC_LOAD = 15;
	public static final int GET_EMERGENCY_BUS_BOOL = 16;
	public static final int GET_EMERGENCY_bUS_REACHING_TIME = 17;
	public static final int GET_SPECIFIC_CAR_REACHING_TIME_BOOL = 18;
	public static final int GET_SPECIFIC_CAR_REACHING_TIME = 19;
	public static final int GET_ACCELERATION = 20;
	
	private double speedOfVehicle = 0.0;
	private int travelTIme = 0;
	private int waitingTIme = 0;
	private static double avgTimeLoss = 0.0;
	private int arrivedVehicle = 0;
	private static double avgSpeedOfVehicle = 0.0;
	private static double avgAccOfVehicle = 0.0;
	private static double avgTravelOfVehicle = 0.0;
	private double co2Emission = 0.0;
	private double emergencyVehicleReachedAtTime = 0.0;
	private double emergencyBusReachedAtTime = 0.0;
	private double trafficLoad = 0.0;
	private double vehicleReachedTime = 0.0;
	private double specificCarReachingTime = 0.0;
	private boolean specificReachedBool = false;
	
	private boolean getEmergencyVehicleBool_vehicleReachedTime = false;
	private boolean getEmergencyRelatedBusBool_vehicleReachedTime = false;
	

       public sumoState(ParametersForState params){
 
 	//* Initialize MultiVeStA */
	super(params);
	/* Load the wrapping library */
	
	System.loadLibrary(SUMO_LIBRARY);
	/* Initialize SUMO */
	
        
        Simulation.load(new StringVector(new String[] {"-c", "data/cross.sumocfg"}));
 
       }
 
 
        /**
	 * Reset SUMO with the wanted random seed.
	 * @param randomSeed The random seed generated by the client of multivesta
	 */
	@Override
	public void setSimulatorForNewSimulation(int randomSeed) {
		//System.out.println("we have to set");
		// reset values of private variables 
		arrivedVehicle = 0;
		 Simulation.close();
		 generateRoute();
		 System.out.println("we have restarted........................................ the SUMO simulator with different seed");
		 
		 emergencyVehicleReachedAtTime = 0.0;
		 emergencyBusReachedAtTime = 0.0;
		 getEmergencyVehicleBool_vehicleReachedTime = false;
		 getEmergencyRelatedBusBool_vehicleReachedTime = false;
		 avgSpeedOfVehicle = 0.0;
	        StringVector sv = new StringVector();
		sv.add("-c");
		sv.add("data/cross.sumocfg");
		
		Simulation.load(sv);
	
		
		
	}
	
	/**
	 * Return the current simulation time step.
	 * @return the current simulation time step.
	 * @todo It could return time in seconds, instead of steps
	 */
	@Override
	public double getTime() {
		return Simulation.getTime();
		//return 0.0;
	}
	
	/**
	 * Performs one step of simulation.
	 */
	@Override
	public void performOneStepOfSimulation() {
		Simulation.step();
		//System.out.println("check");
	}
	
	/**
	 * Runs an experiment up to completion.
	 */
	@Override
	public void performWholeSimulation() {
	
		while(true){
		if(getIsSimulationFinished()){
		break;
		}
		else{ performOneStepOfSimulation ();}
		   
		}
		
	}
	
	
	
	/**
	 * Returns <tt>true</tt> if the current experiment is finished, <tt>false</tt> otherwise.
	 * @return <tt>true</tt> if the current experiment is finished, <tt>false</tt> otherwise.
	 */
	@Override
	public boolean getIsSimulationFinished() {
	
		if(Simulation.getMinExpectedNumber()> 0){
		return false;
		}
		else{
		
		return true;
		}
	}
	
	public int getWaitingTIme(){
	waitingTIme = 0;
	StringVector vehIds = new StringVector();
	vehIds = Vehicle.getIDList();
	
	if(vehIds.size() > 0){
	     for (String o : vehIds) {
	         if(Vehicle.getSpeed(o) < 1.0 ){
	         waitingTIme += 1;
	         }
	     }
	}
	System.out.println("The average waiting time is called......"+ waitingTIme );
	return waitingTIme;
	
	}
	
	public double getTravelTime(){
	System.out.println("Get travel time is called .........");
	travelTIme = 0;
	StringVector vehIds = new StringVector();
	vehIds = Vehicle.getIDList();
	
	if(vehIds.size() > 0){
	     for (String o : vehIds) {
	         if(Vehicle.getSpeed(o) > 1.0 ){
	         travelTIme += 1;
	         }
	     }
	     
	}
	if(vehIds.size() > 0){
	avgTravelOfVehicle = travelTIme / vehIds.size();
	}
	return avgTravelOfVehicle;
	
	}
	
	public int getArrivedIDList(){
	//arrivedVehicle = 0;
	StringVector vehIds = new StringVector();
	vehIds = Simulation.getArrivedIDList();
	
	if(vehIds.size() > 0){
	     for (String o : vehIds) {
	        arrivedVehicle += 1;
	     }
	}
	System.out.println("Get Arrived vehicle list called ........"+ arrivedVehicle);
	return arrivedVehicle;
	
	}
	
	
	
	
	public double getAvgSpeed(){
          speedOfVehicle = 0.0;
	avgSpeedOfVehicle = 0.0;
	//if(Simulation.getTime() >= 85 && Simulation.getTime() <= 185){
	//speedOfVehicle = Vehicle.getSpeed("rightUp14");
	//System.out.println("Speed of rightUp14:"+ Vehicle.getSpeed("rightUp14"));
	//}
	//System.out.println("Get average speed is called .............");
	StringVector vehSpeed = new StringVector();
	vehSpeed = Vehicle.getIDList();
	
	System.out.println("VEhicle Ids: " + vehSpeed);
	if(vehSpeed.size() > 0){
	     //System.out.println("I am inside VEhicle Ids: " + vehIds);
	     //System.out.println("Vehicle Speed:" );
	     for (String o : vehSpeed) {
	         
	         
	         speedOfVehicle += Vehicle.getSpeed(o);
	         System.out.println("Vehicle speed now: "+ Vehicle.getSpeed(o));
	         System.out.println("Total speed of Vehicle now: "+ speedOfVehicle);
	         
	         
	         
	         
	         //System.out.println("Average speed now: "+ avgSpeedOfVehicle);
	         
	     }
	     avgSpeedOfVehicle = speedOfVehicle / vehSpeed.size();
	     System.out.println("Get average speed is called  Vehicle speed now: "+ avgSpeedOfVehicle);
	}
	
	return avgSpeedOfVehicle;
	
	}
	
	public double getAvgAcc(){
	double accOfVehicle = 0.0;
	avgAccOfVehicle = 0.0;
	//if(Simulation.getTime() >= 85 && Simulation.getTime() <= 185){
	//speedOfVehicle = Vehicle.getSpeed("rightUp14");
	//System.out.println("Speed of rightUp14:"+ Vehicle.getSpeed("rightUp14"));
	//}
	System.out.println("Get average acc is called .............");
	StringVector vehSpeed = new StringVector();
	vehSpeed = Vehicle.getIDList();
	//System.out.println("VEhicle Ids: " + vehIds);
	if(vehSpeed.size() > 0){
	     //System.out.println("I am inside VEhicle Ids: " + vehIds);
	     //System.out.println("Vehicle Speed:" );
	     for (String o : vehSpeed) {
	         if(vehSpeed.size()>0){
	         
	         accOfVehicle += Vehicle.getAcceleration(o);
	         System.out.println("Vehicle acc now: "+ accOfVehicle);
	         
	         }
	         avgAccOfVehicle = accOfVehicle / vehSpeed.size();
	         
	         //System.out.println("Average speed now: "+ avgSpeedOfVehicle);
	         
	     }
	}
	
	return avgAccOfVehicle;
	
	}
	
	
	public double getAvgTimeLoss(){
	int timeLoss = 0;
	avgTimeLoss = 1.0;
	
	StringVector vehIds = new StringVector();
	vehIds = Vehicle.getIDList();
	System.out.println("Get average time loss is called .............");
	//System.out.println("VEhicle Ids: " + vehIds);
	if(vehIds.size() > 0){
	     //System.out.println("I am inside VEhicle Ids: " + vehIds);
	     //System.out.println("Vehicle Speed:" );
	     for (String o : vehIds) {
	         //System.out.println("Vehicle Ids: "+ o + "Max Speed  " + Vehicle.getMaxSpeed(o));
	         //System.out.println("Vehicle Ids: "+ o + "Speed  " + Vehicle.getSpeed(o));
	         if(Vehicle.getSpeed(o) < ( Vehicle.getMaxSpeed(o) - 4 ) ){
	         timeLoss += 1;
	         //System.out.println("Time loss now: "+ timeLoss);
	         }
	     }
	     avgTimeLoss = (avgTimeLoss + timeLoss);
	     //System.out.println("average time loss:" + timeLoss + "vehIds Size" +vehIds.size() );
	}
	
	return avgTimeLoss;
	
	}
	
	public double getTrafficLoad(){
	System.out.println("Traffic load is called ..................");
	double trafficLoad = 0.0;
	StringVector vehIds = new StringVector();
	vehIds = Vehicle.getIDList();
	if(vehIds.size() > 0){
	for (String o : vehIds) {
	trafficLoad += 1;
	}
	}
	System.out.println("Traffic load now:  "+ trafficLoad);
	
	return trafficLoad;
	}
	   /**
        *  call to generate new route file
        *
        */
     public static void generateRoute(){
          try{
                Process p = Runtime.getRuntime().exec("python3 chooseRoute.py ");
                }catch(Exception e){
                System.out.println("Error happened:" + e);
                }
     }
     
     
     
     
     public int getArrivedVehicle(){
     
     StringVector av = new StringVector();
      av = Simulation.getArrivedIDList();
     for (String o : av) {
     	if(av.size() > 0){
     	continue;
     }
     }
     System.out.println("Vehicle Id:"  );
     
     
     return arrivedVehicle;
     
     
     }
     
     public int getVehiclesNearToIntersection(){
     
     return 0;	
     }
     
     public int test(){
     StringVector av = new StringVector();
      av = Simulation.getArrivedIDList();
     for (String o : av) {
     	if(av.size() > 0){
     	arrivedVehicle += 1;
     	
     	}
     }
     
     System.out.println("Checking purpose:" + Simulation.getArrivedIDList());
     
     
     return arrivedVehicle;
     }
     
     // --------------------------------------------------------------------------------------------------------------------------------------------
     
          public boolean getEmergencyVehicleBool(){
    //boolean vehicleReachedTime = false;
    StringVector av = new StringVector();
      av = Simulation.getArrivedIDList();
     for (String o : av) {
     	if(av.size() > 0){
     	//System.out.println("vehicle : " + o);
     	 if(o.equals("emergency_0"))
     	 {
     	 
     	 System.out.println("emergency bool is reached its destination: " + Simulation.getTime());
     	  getEmergencyVehicleBool_vehicleReachedTime = true	 ;
     	  //vehicleReachedAtTime = Simulation.getTime();
     	  
     	  //destroyState();
     	 }
     	
     	}
     	//System.out.println("getEmergency is called ..........." );
     }
    
    return getEmergencyVehicleBool_vehicleReachedTime;
     }
     
     
      public double getEmergencyVehicle(){
    System.out.println("getEmergency is called ........... and its time now "+ emergencyVehicleReachedAtTime);
    //emergencyVehicleReachedAtTime = 0.0;
    StringVector av = new StringVector();
      av = Simulation.getArrivedIDList();
     for (String o : av) {
     	if(av.size() > 0){
     	//System.out.println("vehicle : " + o);
     	 if(o.equals("emergency_0"))
     	 {
     	 
     	 System.out.println("emergency is reached its destination: " + Simulation.getTime());
     	  emergencyVehicleReachedAtTime = Simulation.getTime() ;
     	  
     	  
     	 }
     	 /*
     	if(o.equals("Bus_0"))
     	 {
     	 
     	 System.out.println("Bus_0 is reached its destination: " + Simulation.getTime());
     	  vehicleReachedTime = Simulation.getTime() ;
     	  
     	  //destroyState();
     	 } */
     	
     	}
     	
     }
    
    return emergencyVehicleReachedAtTime;
     }
     
     
     
     
     
     
     
     
     
      
      public boolean getEmergencyRelatedBusBool(){
    //boolean vehicleReachedTime = false;
    StringVector av = new StringVector();
      av = Simulation.getArrivedIDList();
     for (String o : av) {
     	if(av.size() > 0){
     	//System.out.println("vehicle : " + o);
     	 if(o.equals("Bus_0"))
     	 {
     	 
     	 System.out.println("emergency related bus is reached its destination: " + Simulation.getTime());
     	  getEmergencyRelatedBusBool_vehicleReachedTime = true	 ;
     	  //vehicleReachedAtTime = Simulation.getTime();
     	  
     	  //destroyState();
     	 }
     	
     	}
     	//System.out.println("getEmergency related bus is called ..........." );
     }
    
    return getEmergencyRelatedBusBool_vehicleReachedTime;
     }
  
     public double getEmergencyRelatedBus(){
    // emergencyBusReachedAtTime = 0.0;
    StringVector av = new StringVector();
      av = Simulation.getArrivedIDList();
     for (String o : av) {
     	if(av.size() > 0){
     	//System.out.println("vehicle : " + o);
     	 if(o.equals("Bus_0"))
     	 {
     	 
     	 System.out.println("emergency Bus is reached its destination: " + Simulation.getTime());
     	  //vehicleReachedTime = true	 ;
     	  emergencyBusReachedAtTime = Simulation.getTime();
     	  
     	  //destroyState();
     	 }
     	
     	}
     	//System.out.println("getEmergency Bus time is called ..........." );
     }
    
    return emergencyBusReachedAtTime;
     }
     
     
   
        
  // --------------------------------------------------------------------------------------------------------------------------------------------------------------
     
     public double getSpecificVehicle(){
    //System.out.println("getSpecific is called ...........");
    boolean specificReachedBool = false;
    StringVector av = new StringVector();
      av = Simulation.getArrivedIDList();
     for (String o : av) {
     	if(av.size() > 0){
     	 if(o.equals("Car_0"))
     	 {
     	 specificReachedBool = true;
     	 System.out.println("Specific is reached its destination: " + Simulation.getTime());
     	  specificCarReachingTime = Simulation.getTime() ;
     	  
     	  
     	 }
     	
     	}
     	
     }
    
    return specificCarReachingTime;
     }
     
     public boolean getSpecificVehicleBool(){
    //System.out.println("getSpecific is called ...........");
    //boolean specificReachedBool = false;
    StringVector av = new StringVector();
      av = Simulation.getArrivedIDList();
     for (String o : av) {
     	if(av.size() > 0){
     	 if(o.equals("Car_0"))
     	 {
     	 specificReachedBool = true;
     	 System.out.println("Specific is reached its destination: " + Simulation.getTime());
     	  //specificCarReachingTime = Simulation.getTime() ;
     	 }
     	}
     	
     }
    
    return specificReachedBool;
     }
     
    
       
     
    public double getCO2Emission(){
      co2Emission = 0.0;
      StringVector co2 = new StringVector();
      co2 = Vehicle.getIDList();
      for (String o : co2) {
     	if(co2.size() > 0){
     	co2Emission += Vehicle.getCO2Emission(o);
     	//System.out.println("CO2 Emission:" + Vehicle.getCO2Emission(o));
     	}
     }
     co2Emission = co2Emission / (100+ co2.size());
     //System.out.println("Checking purpose:" + Simulation.getArrivedIDList());
     System.out.println("Co2 emission is called ........." + co2Emission);
    return co2Emission;
    }
	
	
	
	
   public double getI1TrafficData(){
   System.out.println("getI1TrafficData is called .........");
   double trafficWaitingtime = 0.0;
   StringVector lanes = new StringVector();
      //lanes = Vehicle.getIDList();
      lanes.add("1i_0");
      lanes.add("2i_0");
      lanes.add("3i_0");
      lanes.add("4i_0");
      for (String l : lanes){
      trafficWaitingtime += Lane.getWaitingTime(l);
      //System.out.println("get Waiting time list in lane:     "+ Lane.getWaitingTime(l));
      }
   
   return trafficWaitingtime;
   }
   
      public double getI2TrafficData(){
      System.out.println("getI2TrafficData is called .........");
   double trafficWaitingtime = 0.0;
   StringVector lanes = new StringVector();
      //lanes = Vehicle.getIDList();
      lanes.add("-gneE1_0");
      lanes.add("-gneE2_0");
      lanes.add("-gneE3_0");
      lanes.add("gneE0_0");
      for (String l : lanes){
      trafficWaitingtime += Lane.getWaitingTime(l);
      //System.out.println("get Waiting time list in lane:     "+ Lane.getWaitingTime(l));
      }
   
   return trafficWaitingtime;
   }
   
   public double getSpeedDeviation(){
   System.out.println("Get speed deviation is called ......................");
   double speedDev = 0;
   StringVector minGapVeh = new StringVector();
      minGapVeh = Vehicle.getIDList();
      for (String o : minGapVeh) {
     	if(minGapVeh.size() > 0){
     	speedDev += Vehicle.getSpeedDeviation(o);
     	//System.out.println("speed deviation :" + speedDev);
     	}
     }
     //if(minGapVeh.size() > 0){
     //speedDev = speedDev / minGapVeh.size();
    // }
   return speedDev;
   }
	

	
	
	
	/**
	 * Performs an observation on the current experiment.
	*/
	@Override
	public double rval(int observation) {
		switch(observation) {
		case OBSERVE_TIME: return getTime();
		case OBSERVE_STEP: return getTime();
		case OBSERVE_DONE: return getIsSimulationFinished() ? 1.0 : 0.0;
		case OBSERVE_WAITINGTIME: return getWaitingTIme();
		case TIME_LOSS: return getAvgTimeLoss();
		case GET_SPEED: return getAvgSpeed();
		case GET_ARRIVED_VEHICLE: return getArrivedIDList();
		case GET_CO2: return getCO2Emission();
		case GET_DEVIATION_OF_SPEED_FACTOR: return getSpeedDeviation();
		case GET_TRAVEL_TIME: return getTravelTime();
		case GET_TRAFFIC_I1: return getI1TrafficData();
		case GET_TRAFFIC_I2: return getI2TrafficData();
		case GET_EMERGENCY: return getEmergencyVehicle();
		case GET_EMERGENCY_BOOL: return getEmergencyVehicleBool() ? 1.0 : 0.0;
		case GET_DEPARTED_VEHICLE: return Simulation.getDepartedNumber();
		case GET_TRAFFIC_LOAD: return getTrafficLoad();
		case GET_EMERGENCY_BUS_BOOL: return getEmergencyRelatedBusBool() ? 1.0 : 0.0;
		case GET_EMERGENCY_bUS_REACHING_TIME: return getEmergencyRelatedBus();
		case GET_SPECIFIC_CAR_REACHING_TIME_BOOL: return getSpecificVehicleBool() ? 1.0 : 0.0;
		case GET_SPECIFIC_CAR_REACHING_TIME: return getSpecificVehicle();
		case GET_ACCELERATION: return getAvgAcc();
		
		default:           return 0;
		}
	}

	 @Override
	public double rval(String observation) {
		
	
	
	  return 2.0;
	}
	
	
	/**
	 * Releases the resources allocated by SUMO.
	 * This method must be called when SUMO is not necessary anymore.
	 */
	@Override
	public void destroyState() {
		System.out.println("Sumo is closed by calling destroyState()");
		Simulation.close();
	}
	
	
	
	

        
       

     public static void main(String[] args) {
     System.out.println("I am in Main now");
     String configFile = "data/cross.sumocfg";
     ParametersForState params = new ParametersForState(configFile, "");
         sumoState s = new sumoState(params);
         s.generateRoute();
         for(int i=0;i<100;i++){
         s.performOneStepOfSimulation();
         //s.getTrafficLoad();
         s.getAvgSpeed();
         //s.getEmergencyRelatedBus();
         
         //System.out.println("Number vehicle loaded at time "+ Simulation.getTime() + " are :"+Simulation.getLoadedNumber());
         //System.out.println("get Waiting time list in lane:     "+ Lane.getWaitingTime("4i_0")+"  at Time step:"+i);
         
         //System.out.println("One step completed....."+ i);
         //System.out.println(s.rval(7));
         //s.setSimulatorForNewSimulation(10);
         
         }
         //System.out.println("average time loss:"+ avgTimeLoss);
         //System.out.println(s.getSpeed());
        //s.setSimulatorForNewSimulation(67);
        //for(int i=0;i<10;i++){
         //s.performOneStepOfSimulation();
         //System.out.println("One step completed....."+Simulation.getTime());
         //}
     
    }
    

    
   
    
    
    
}



